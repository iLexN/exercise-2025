<?php

declare(strict_types=1);
/**
 * Copyright (c) The Magic , Distributed under the software license
 */

namespace Dtyq\PhpMcp\Tests\Unit\Types\Requests;

use Dtyq\PhpMcp\Shared\Exceptions\ValidationError;
use Dtyq\PhpMcp\Types\Requests\ReadResourceRequest;
use PHPUnit\Framework\TestCase;

/**
 * Test case for ReadResourceRequest class.
 * @internal
 */
class ReadResourceRequestTest extends TestCase
{
    public function testConstructorWithValidData(): void
    {
        $uri = 'file://test.txt';
        $id = 'read_123';
        $request = new ReadResourceRequest($uri, $id);

        $this->assertSame('resources/read', $request->getMethod());
        $this->assertSame($uri, $request->getUri());
        $this->assertSame($id, $request->getId());
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testConstructorWithAutoGeneratedId(): void
    {
        $uri = 'file://test.txt';
        $request = new ReadResourceRequest($uri);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('read_resource_', $request->getId());
    }

    public function testSetUri(): void
    {
        $request = new ReadResourceRequest('file://initial.txt');

        $request->setUri('file://updated.txt');
        $this->assertSame('file://updated.txt', $request->getUri());
    }

    public function testSetUriWithEmptyString(): void
    {
        $request = new ReadResourceRequest('file://initial.txt');

        $this->expectException(ValidationError::class);
        $request->setUri('');
    }

    public function testSetId(): void
    {
        $request = new ReadResourceRequest('file://test.txt');

        $request->setId('custom_id');
        $this->assertSame('custom_id', $request->getId());

        $request->setId(12345);
        $this->assertSame(12345, $request->getId());
    }

    public function testSetIdWithInvalidType(): void
    {
        $request = new ReadResourceRequest('file://test.txt');

        $this->expectException(ValidationError::class);
        $request->setId(12.34);
    }

    public function testProgressToken(): void
    {
        $request = new ReadResourceRequest('file://test.txt');

        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());

        $request->setProgressToken('token_123');
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame('token_123', $request->getProgressToken());

        $request->setProgressToken(456);
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame(456, $request->getProgressToken());

        $request->setProgressToken(null);
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testSetProgressTokenWithInvalidType(): void
    {
        $request = new ReadResourceRequest('file://test.txt');

        $this->expectException(ValidationError::class);
        $request->setProgressToken(12.34);
    }

    public function testGetParams(): void
    {
        $uri = 'file://test.txt';
        $request = new ReadResourceRequest($uri);

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame($uri, $params['uri']);
        $this->assertArrayNotHasKey('_meta', $params);
    }

    public function testGetParamsWithProgressToken(): void
    {
        $request = new ReadResourceRequest('file://test.txt');
        $request->setProgressToken('token_123');

        $params = $request->getParams();
        $this->assertArrayHasKey('_meta', $params);
        $this->assertSame('token_123', $params['_meta']['progressToken']);
    }

    public function testToJsonRpc(): void
    {
        $uri = 'file://test.txt';
        $id = 'read_123';
        $request = new ReadResourceRequest($uri, $id);

        $jsonRpc = $request->toJsonRpc();
        $this->assertSame('2.0', $jsonRpc['jsonrpc']);
        $this->assertSame($id, $jsonRpc['id']);
        $this->assertSame('resources/read', $jsonRpc['method']);
        $this->assertIsArray($jsonRpc['params']);
        $this->assertSame($uri, $jsonRpc['params']['uri']);
    }

    public function testFromArrayWithValidData(): void
    {
        $data = [
            'id' => 'read_123',
            'params' => [
                'uri' => 'file://test.txt',
            ],
        ];

        $request = ReadResourceRequest::fromArray($data);

        $this->assertSame('read_123', $request->getId());
        $this->assertSame('file://test.txt', $request->getUri());
    }

    public function testFromArrayWithoutId(): void
    {
        $data = [
            'params' => [
                'uri' => 'file://test.txt',
            ],
        ];

        $request = ReadResourceRequest::fromArray($data);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('read_resource_', $request->getId());
        $this->assertSame('file://test.txt', $request->getUri());
    }

    public function testFromArrayMissingUri(): void
    {
        $data = [
            'params' => [],
        ];

        $this->expectException(ValidationError::class);
        ReadResourceRequest::fromArray($data);
    }
}
