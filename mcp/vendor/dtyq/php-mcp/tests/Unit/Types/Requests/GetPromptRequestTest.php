<?php

declare(strict_types=1);
/**
 * Copyright (c) The Magic , Distributed under the software license
 */

namespace Dtyq\PhpMcp\Tests\Unit\Types\Requests;

use Dtyq\PhpMcp\Shared\Exceptions\ValidationError;
use Dtyq\PhpMcp\Types\Requests\GetPromptRequest;
use PHPUnit\Framework\TestCase;

/**
 * Test case for GetPromptRequest class.
 * @internal
 */
class GetPromptRequestTest extends TestCase
{
    public function testConstructorWithValidData(): void
    {
        $name = 'test_prompt';
        $arguments = ['param1' => 'value1', 'param2' => 'value2'];
        $id = 'get_prompt_123';

        $request = new GetPromptRequest($name, $arguments, $id);

        $this->assertSame('prompts/get', $request->getMethod());
        $this->assertSame($name, $request->getName());
        $this->assertSame($arguments, $request->getArguments());
        $this->assertSame($id, $request->getId());
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testConstructorWithAutoGeneratedId(): void
    {
        $name = 'test_prompt';
        $request = new GetPromptRequest($name);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('get_prompt_', $request->getId());
        $this->assertNull($request->getArguments());
    }

    public function testSetName(): void
    {
        $request = new GetPromptRequest('initial_prompt');

        $request->setName('updated_prompt');
        $this->assertSame('updated_prompt', $request->getName());
    }

    public function testSetNameWithEmptyString(): void
    {
        $request = new GetPromptRequest('initial_prompt');

        $this->expectException(ValidationError::class);
        $request->setName('');
    }

    public function testSetArguments(): void
    {
        $request = new GetPromptRequest('test_prompt');
        $arguments = ['key' => 'value', 'number' => 'string_value'];

        $request->setArguments($arguments);
        $this->assertSame($arguments, $request->getArguments());

        $request->setArguments(null);
        $this->assertNull($request->getArguments());
    }

    public function testSetArgumentsWithInvalidKeyType(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $this->expectException(ValidationError::class);
        $request->setArguments([123 => 'value']);
    }

    public function testSetArgumentsWithInvalidValueType(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $this->expectException(ValidationError::class);
        $request->setArguments(['key' => 123]);
    }

    public function testSetId(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $request->setId('custom_id');
        $this->assertSame('custom_id', $request->getId());

        $request->setId(12345);
        $this->assertSame(12345, $request->getId());
    }

    public function testSetIdWithInvalidType(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $this->expectException(ValidationError::class);
        $request->setId(12.34);
    }

    public function testProgressToken(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());

        $request->setProgressToken('token_123');
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame('token_123', $request->getProgressToken());

        $request->setProgressToken(456);
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame(456, $request->getProgressToken());

        $request->setProgressToken(null);
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testSetProgressTokenWithInvalidType(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $this->expectException(ValidationError::class);
        $request->setProgressToken(12.34);
    }

    public function testGetParams(): void
    {
        $name = 'test_prompt';
        $arguments = ['param' => 'value'];

        $request = new GetPromptRequest($name, $arguments);

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame($name, $params['name']);
        $this->assertSame($arguments, $params['arguments']);
        $this->assertArrayNotHasKey('_meta', $params);
    }

    public function testGetParamsWithoutArguments(): void
    {
        $request = new GetPromptRequest('test_prompt');

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame('test_prompt', $params['name']);
        $this->assertArrayNotHasKey('arguments', $params);
    }

    public function testGetParamsWithProgressToken(): void
    {
        $request = new GetPromptRequest('test_prompt');
        $request->setProgressToken('token_123');

        $params = $request->getParams();
        $this->assertArrayHasKey('_meta', $params);
        $this->assertSame('token_123', $params['_meta']['progressToken']);
    }

    public function testToJsonRpc(): void
    {
        $name = 'test_prompt';
        $arguments = ['param' => 'value'];
        $id = 'get_prompt_123';

        $request = new GetPromptRequest($name, $arguments, $id);

        $jsonRpc = $request->toJsonRpc();
        $this->assertSame('2.0', $jsonRpc['jsonrpc']);
        $this->assertSame($id, $jsonRpc['id']);
        $this->assertSame('prompts/get', $jsonRpc['method']);
        $this->assertIsArray($jsonRpc['params']);
        $this->assertSame($name, $jsonRpc['params']['name']);
        $this->assertSame($arguments, $jsonRpc['params']['arguments']);
    }

    public function testFromArrayWithValidData(): void
    {
        $data = [
            'id' => 'get_prompt_123',
            'params' => [
                'name' => 'test_prompt',
                'arguments' => ['param' => 'value'],
            ],
        ];

        $request = GetPromptRequest::fromArray($data);

        $this->assertSame('get_prompt_123', $request->getId());
        $this->assertSame('test_prompt', $request->getName());
        $this->assertSame(['param' => 'value'], $request->getArguments());
    }

    public function testFromArrayWithoutArguments(): void
    {
        $data = [
            'params' => [
                'name' => 'test_prompt',
            ],
        ];

        $request = GetPromptRequest::fromArray($data);

        $this->assertSame('test_prompt', $request->getName());
        $this->assertNull($request->getArguments());
        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('get_prompt_', $request->getId());
    }

    public function testFromArrayWithInvalidArgumentsType(): void
    {
        $data = [
            'params' => [
                'name' => 'test_prompt',
                'arguments' => 'invalid',
            ],
        ];

        $this->expectException(ValidationError::class);
        GetPromptRequest::fromArray($data);
    }

    public function testFromArrayMissingName(): void
    {
        $data = [
            'params' => [
                'arguments' => ['param' => 'value'],
            ],
        ];

        $this->expectException(ValidationError::class);
        GetPromptRequest::fromArray($data);
    }
}
