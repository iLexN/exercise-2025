<?php

declare(strict_types=1);
/**
 * Copyright (c) The Magic , Distributed under the software license
 */

namespace Dtyq\PhpMcp\Tests\Unit\Types\Requests;

use Dtyq\PhpMcp\Shared\Exceptions\ValidationError;
use Dtyq\PhpMcp\Types\Requests\InitializeRequest;
use PHPUnit\Framework\TestCase;

/**
 * Test case for InitializeRequest class.
 * @internal
 */
class InitializeRequestTest extends TestCase
{
    public function testConstructorWithValidData(): void
    {
        $protocolVersion = '2025-03-26';
        $capabilities = ['tools' => true, 'resources' => false];
        $clientInfo = ['name' => 'test-client', 'version' => '1.0.0'];
        $id = 'init_123';

        $request = new InitializeRequest($protocolVersion, $capabilities, $clientInfo, $id);

        $this->assertSame('initialize', $request->getMethod());
        $this->assertSame($protocolVersion, $request->getProtocolVersion());
        $this->assertSame($capabilities, $request->getCapabilities());
        $this->assertSame($clientInfo, $request->getClientInfo());
        $this->assertSame($id, $request->getId());
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testConstructorWithAutoGeneratedId(): void
    {
        $protocolVersion = '2025-03-26';
        $capabilities = [];
        $clientInfo = [];

        $request = new InitializeRequest($protocolVersion, $capabilities, $clientInfo);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('init_', $request->getId());
    }

    public function testSetProtocolVersion(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $request->setProtocolVersion('2025-03-26');
        $this->assertSame('2025-03-26', $request->getProtocolVersion());
    }

    public function testSetProtocolVersionWithEmptyString(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $this->expectException(ValidationError::class);
        $request->setProtocolVersion('');
    }

    public function testSetCapabilities(): void
    {
        $request = new InitializeRequest('1.0', [], []);
        $capabilities = ['tools' => true, 'resources' => true];

        $request->setCapabilities($capabilities);
        $this->assertSame($capabilities, $request->getCapabilities());
    }

    public function testSetClientInfo(): void
    {
        $request = new InitializeRequest('1.0', [], []);
        $clientInfo = ['name' => 'updated-client', 'version' => '2.0.0'];

        $request->setClientInfo($clientInfo);
        $this->assertSame($clientInfo, $request->getClientInfo());
    }

    public function testSetId(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $request->setId('custom_id');
        $this->assertSame('custom_id', $request->getId());

        $request->setId(12345);
        $this->assertSame(12345, $request->getId());
    }

    public function testSetIdWithInvalidType(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $this->expectException(ValidationError::class);
        $request->setId(12.34);
    }

    public function testProgressToken(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());

        $request->setProgressToken('token_123');
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame('token_123', $request->getProgressToken());

        $request->setProgressToken(456);
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame(456, $request->getProgressToken());

        $request->setProgressToken(null);
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testSetProgressTokenWithInvalidType(): void
    {
        $request = new InitializeRequest('1.0', [], []);

        $this->expectException(ValidationError::class);
        $request->setProgressToken(12.34);
    }

    public function testGetParams(): void
    {
        $protocolVersion = '2025-03-26';
        $capabilities = ['tools' => true];
        $clientInfo = ['name' => 'test'];

        $request = new InitializeRequest($protocolVersion, $capabilities, $clientInfo);

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame($protocolVersion, $params['protocolVersion']);
        $this->assertSame($capabilities, $params['capabilities']);
        $this->assertSame($clientInfo, $params['clientInfo']);
        $this->assertArrayNotHasKey('_meta', $params);
    }

    public function testGetParamsWithProgressToken(): void
    {
        $request = new InitializeRequest('1.0', [], []);
        $request->setProgressToken('token_123');

        $params = $request->getParams();
        $this->assertArrayHasKey('_meta', $params);
        $this->assertSame('token_123', $params['_meta']['progressToken']);
    }

    public function testToJsonRpc(): void
    {
        $protocolVersion = '2025-03-26';
        $capabilities = ['tools' => true];
        $clientInfo = ['name' => 'test'];
        $id = 'init_123';

        $request = new InitializeRequest($protocolVersion, $capabilities, $clientInfo, $id);

        $jsonRpc = $request->toJsonRpc();
        $this->assertSame('2.0', $jsonRpc['jsonrpc']);
        $this->assertSame($id, $jsonRpc['id']);
        $this->assertSame('initialize', $jsonRpc['method']);
        $this->assertIsArray($jsonRpc['params']);
        $this->assertSame($protocolVersion, $jsonRpc['params']['protocolVersion']);
        $this->assertSame($capabilities, $jsonRpc['params']['capabilities']);
        $this->assertSame($clientInfo, $jsonRpc['params']['clientInfo']);
    }

    public function testFromArrayWithValidData(): void
    {
        $data = [
            'id' => 'init_123',
            'params' => [
                'protocolVersion' => '2025-03-26',
                'capabilities' => ['tools' => true],
                'clientInfo' => ['name' => 'test'],
            ],
        ];

        $request = InitializeRequest::fromArray($data);

        $this->assertSame('init_123', $request->getId());
        $this->assertSame('2025-03-26', $request->getProtocolVersion());
        $this->assertSame(['tools' => true], $request->getCapabilities());
        $this->assertSame(['name' => 'test'], $request->getClientInfo());
    }

    public function testFromArrayWithoutId(): void
    {
        $data = [
            'params' => [
                'protocolVersion' => '2025-03-26',
                'capabilities' => ['tools' => true],
                'clientInfo' => ['name' => 'test'],
            ],
        ];

        $request = InitializeRequest::fromArray($data);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('init_', $request->getId());
    }

    public function testFromArrayMissingProtocolVersion(): void
    {
        $data = [
            'params' => [
                'capabilities' => ['tools' => true],
                'clientInfo' => ['name' => 'test'],
            ],
        ];

        $this->expectException(ValidationError::class);
        InitializeRequest::fromArray($data);
    }

    public function testFromArrayMissingCapabilities(): void
    {
        $data = [
            'params' => [
                'protocolVersion' => '2025-03-26',
                'clientInfo' => ['name' => 'test'],
            ],
        ];

        $this->expectException(ValidationError::class);
        InitializeRequest::fromArray($data);
    }

    public function testFromArrayMissingClientInfo(): void
    {
        $data = [
            'params' => [
                'protocolVersion' => '2025-03-26',
                'capabilities' => ['tools' => true],
            ],
        ];

        $this->expectException(ValidationError::class);
        InitializeRequest::fromArray($data);
    }
}
