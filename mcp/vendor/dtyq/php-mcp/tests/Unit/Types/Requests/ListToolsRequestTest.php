<?php

declare(strict_types=1);
/**
 * Copyright (c) The Magic , Distributed under the software license
 */

namespace Dtyq\PhpMcp\Tests\Unit\Types\Requests;

use Dtyq\PhpMcp\Shared\Exceptions\ValidationError;
use Dtyq\PhpMcp\Types\Requests\ListToolsRequest;
use PHPUnit\Framework\TestCase;

/**
 * Test case for ListToolsRequest class.
 * @internal
 */
class ListToolsRequestTest extends TestCase
{
    public function testConstructorWithCursor(): void
    {
        $cursor = 'cursor_123';
        $id = 'list_tools_123';
        $request = new ListToolsRequest($cursor, $id);

        $this->assertSame('tools/list', $request->getMethod());
        $this->assertSame($cursor, $request->getCursor());
        $this->assertSame($id, $request->getId());
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testConstructorWithAutoGeneratedId(): void
    {
        $request = new ListToolsRequest();

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('list_tools_', $request->getId());
        $this->assertNull($request->getCursor());
    }

    public function testSetCursor(): void
    {
        $request = new ListToolsRequest();

        $request->setCursor('new_cursor');
        $this->assertSame('new_cursor', $request->getCursor());

        $request->setCursor(null);
        $this->assertNull($request->getCursor());
    }

    public function testSetId(): void
    {
        $request = new ListToolsRequest();

        $request->setId('custom_id');
        $this->assertSame('custom_id', $request->getId());

        $request->setId(12345);
        $this->assertSame(12345, $request->getId());
    }

    public function testSetIdWithInvalidType(): void
    {
        $request = new ListToolsRequest();

        $this->expectException(ValidationError::class);
        $request->setId(12.34);
    }

    public function testProgressToken(): void
    {
        $request = new ListToolsRequest();

        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());

        $request->setProgressToken('token_123');
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame('token_123', $request->getProgressToken());

        $request->setProgressToken(456);
        $this->assertTrue($request->hasProgressToken());
        $this->assertSame(456, $request->getProgressToken());

        $request->setProgressToken(null);
        $this->assertFalse($request->hasProgressToken());
        $this->assertNull($request->getProgressToken());
    }

    public function testSetProgressTokenWithInvalidType(): void
    {
        $request = new ListToolsRequest();

        $this->expectException(ValidationError::class);
        $request->setProgressToken(12.34);
    }

    public function testGetParamsWithoutCursorOrToken(): void
    {
        $request = new ListToolsRequest();

        $params = $request->getParams();
        $this->assertNull($params);
    }

    public function testGetParamsWithCursor(): void
    {
        $cursor = 'cursor_123';
        $request = new ListToolsRequest($cursor);

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame($cursor, $params['cursor']);
        $this->assertArrayNotHasKey('_meta', $params);
    }

    public function testGetParamsWithProgressToken(): void
    {
        $request = new ListToolsRequest();
        $request->setProgressToken('token_123');

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertArrayHasKey('_meta', $params);
        $this->assertSame('token_123', $params['_meta']['progressToken']);
    }

    public function testGetParamsWithBothCursorAndToken(): void
    {
        $cursor = 'cursor_123';
        $request = new ListToolsRequest($cursor);
        $request->setProgressToken('token_456');

        $params = $request->getParams();
        $this->assertIsArray($params);
        $this->assertSame($cursor, $params['cursor']);
        $this->assertArrayHasKey('_meta', $params);
        $this->assertSame('token_456', $params['_meta']['progressToken']);
    }

    public function testToJsonRpc(): void
    {
        $cursor = 'cursor_123';
        $id = 'list_tools_123';
        $request = new ListToolsRequest($cursor, $id);

        $jsonRpc = $request->toJsonRpc();
        $this->assertSame('2.0', $jsonRpc['jsonrpc']);
        $this->assertSame($id, $jsonRpc['id']);
        $this->assertSame('tools/list', $jsonRpc['method']);
        $this->assertIsArray($jsonRpc['params']);
        $this->assertSame($cursor, $jsonRpc['params']['cursor']);
    }

    public function testToJsonRpcWithoutParams(): void
    {
        $request = new ListToolsRequest();

        $jsonRpc = $request->toJsonRpc();
        $this->assertSame('2.0', $jsonRpc['jsonrpc']);
        $this->assertIsString($jsonRpc['id']);
        $this->assertSame('tools/list', $jsonRpc['method']);
        $this->assertArrayNotHasKey('params', $jsonRpc);
    }

    public function testFromArrayWithCursor(): void
    {
        $data = [
            'id' => 'list_tools_123',
            'params' => [
                'cursor' => 'cursor_123',
            ],
        ];

        $request = ListToolsRequest::fromArray($data);

        $this->assertSame('list_tools_123', $request->getId());
        $this->assertSame('cursor_123', $request->getCursor());
    }

    public function testFromArrayWithoutParams(): void
    {
        $data = ['id' => 'list_tools_123'];

        $request = ListToolsRequest::fromArray($data);

        $this->assertSame('list_tools_123', $request->getId());
        $this->assertNull($request->getCursor());
    }

    public function testFromArrayWithoutId(): void
    {
        $data = [
            'params' => [
                'cursor' => 'cursor_123',
            ],
        ];

        $request = ListToolsRequest::fromArray($data);

        $this->assertIsString($request->getId());
        $this->assertStringStartsWith('list_tools_', $request->getId());
        $this->assertSame('cursor_123', $request->getCursor());
    }
}
